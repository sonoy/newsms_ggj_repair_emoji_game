export const emojiRequirements = [
	{ type: "ðŸ˜Ž", requirements: ["ðŸ’€", "ðŸ’›", "ðŸ‘„", "ðŸ•¶"] },
	{ type: "ðŸ˜€", requirements: ["ðŸ’€", "ðŸ’›", "ðŸ‘„", "ðŸ‘€", "ðŸ¦·"] },
	{ type: "ðŸ¤¡", requirements: ["ðŸ’€", "ðŸ’›", "ðŸ‘„", "ðŸ‘€", "ðŸ’„", "ðŸ‘»"] },
	{ type: "ðŸ¥³", requirements: ["ðŸ’€", "ðŸ’›", "ðŸ‘„", "ðŸ‘€", "ðŸŽ‰"] },
	{ type: "ðŸ˜¶", requirements: ["ðŸ’€", "ðŸ’›", "ðŸ‘€"] },
	{ type: "ðŸ¤‘", requirements: ["ðŸ’€", "ðŸ’›", "ðŸ‘…", "ðŸ’°", "ðŸ’°", "ðŸ’°"] },
	{ type: "ðŸ˜´", requirements: ["ðŸ’€", "ðŸ’›", "ðŸ‘€", "ðŸ‘„", "ðŸ’¤"] },
	{ type: "ðŸ˜‚", requirements: ["ðŸ’€", "ðŸ’›", "ðŸ‘€", "ðŸ‘„", "ðŸ’§", "ðŸ’§"] },
	{ type: "ðŸ˜¥", requirements: ["ðŸ’€", "ðŸ’›", "ðŸ‘€", "ðŸ‘„", "ðŸ’§"] },
	{ type: "ðŸ¤“", requirements: ["ðŸ’€", "ðŸ’›", "ðŸ‘€", "ðŸ‘„", "ðŸ•¶"] }
];

const allPartCards = [
	...Array(10).fill("ðŸ’€"),
	...Array(10).fill("ðŸ’›"),
	...Array(8).fill("ðŸ‘„"),
	...Array(2).fill("ðŸ•¶"),
	...Array(8).fill("ðŸ‘€"),
	...Array(1).fill("ðŸ¦·"),
	...Array(3).fill("ðŸ’°"),
	...Array(1).fill("ðŸ’„"),
	...Array(1).fill("ðŸ‘»"),
	...Array(1).fill("ðŸŽ‰"),
	...Array(3).fill("ðŸ’§"),
	...Array(1).fill("ðŸ’¤"),
	...Array(1).fill("ðŸ‘…")
];

const drawCard = (G, ctx) => {
    const drawnCard = G.deck.shift();
    G.players[ctx.currentPlayer].hands.push(drawnCard);
}

export default {
	setup: ctx => {
		const totalPlayer = ctx.numPlayers;
		let partCards = [];

		Array(totalPlayer)
			.fill(null)
			.forEach((x, i) => {
				partCards = [
					...partCards,
					...allPartCards.map((part, index) => ({
						type: "part",
						value: part,
						id: `part-${i * allPartCards.length + index}`
					}))
				];
			});

		return {
			deck: ctx.random.Shuffle([...partCards]),
			players: Array(totalPlayer)
				.fill({ hands: [] })
				.map(player => ({
					...player
				})),
			target: ctx.random.Die(emojiRequirements.length) - 1,
			nextTarget: ctx.random.Die(emojiRequirements.length) - 1
		};
	},

	moves: {
		drawCard: (G, ctx) => {
			const drawnCard = G.deck.shift();
			G.players[ctx.currentPlayer].hands.push(drawnCard);
		}
	}
};
